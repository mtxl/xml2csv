c
ARGV
opts.to_hash
q
opts.to_hash
ARGV
q
ARGV
opts.to_hash
q
n
s
item_keys
q
item.count
item.first
item
q
l-
item.first
content
n
item.content
item
q
match
n
q
c
n
c
n
s
l
items
n
s
q
opts[:config_file]
opt[:config_file]
opts
p opts
q
config_file
s
n
s
n
q
config
c
content
q
content
q
item.content
item
q
parsed.item_content(@i)
parsed.item_content(@i))
c
n
c
content
q
source
p source.class
p source
c
q
s
q
qy
p data
q
p @doc.xpath("//company").map {|i| i.content}
p @doc.xpath("//company").count
p @doc.xpath("//company")
p @doc
q
p parsed.doc.xpath("//company")
p parsed.xpath("//company")
p parsed
p @data
q
p @data
p @i
q
p item
q
p item
q
p item
q
p @item
q
p item
c
@item.content
@item
c
@data
c
@data
p @data
p @item
q
item_keys
p item
item_keys
p item
s
q
p content
q
 fields["compound"][compound_name].key
 fields["compound"][compound_name]
 fields["compound"][
 fields["compaund"]
 fields["compaund"][compound_name]
 fields["compund"][compound_name]
fields
compound_name
 fields[compound_name]
s
l
compound_fields.each { |compound_name, value| puts compound_name}
compound_fields.each { |compound_name, value|; puts compound_name}
compound_fields.each { |compound_name, value|; puts compound_value}
compound_fields.each do |compound_name, value|; puts compound_value;end
compound_fields.each do |compound_name, value|; pts compound_value}
q
compound_fields.each {|c,v| p c}
compound_fields.each {|c| p c}
compound_fields
c
p content
n
q
n.each {|i| i.content}
n.map {|i| i.content}
n.map {|i| i}
n.each {|i| i}
n.last.content
n.first.content
n.first
n.count
n = parsed.doc.xpath(parsed.root)
parsed.doc.xpath(parsed.root).class
parsed.doc.xpath(parsed.root).each {|i| i}
parsed.doc.xpath(parsed.root).each {|i| i.content}
parsed.doc.xpath(parsed.root).count
parsed.doc.xpath(parsed.root)
p @data.count
p @data.content
p @data
p @data.content
p @item.content
p @item.conent
c
p content
n
p item
q
parsed.item_content(@item))
p parsed
p @item
q
p item
c
n
p @doc
n
p source
p fields
q
name
match
p @@adapters
q
p @@adapters
p match
q
 @doc.xpath("//company").count
 @doc.xpath("//company")
 @doc.xpath("company").first
 @doc.xpath("company").count
 @doc.xpath(root).count
 @doc.xpath(root)
q
@doc.xpath("./company").count
@doc.xpath("./company")
root
@doc.xpath("./item")
@doc.xpath(".//item")
@doc
items.first.content
items.first.conent
items.count
c
puts i
q
field.content.strip
field.content.chomp!
field.content.chomp
field.content
field.contnet
field
q
 YAML.load(config).class
 YAML.load(config)
config
fields
q
match.first.new(1,2)
match.first.new 1,2
match.first.new
match.first
match
c
q
"test" =~ "t"
[[XmlParser, "test"]].map {|k,v| v}
[[XmlParser, "test"]].find {|k,v| v =~ "test"}
[[XmlParser, "test"]].find {|k,v| v ~= "test"}
[[XmlParser, "test"]].find {|k,v| v == "test"}
[[XmlParser, "test"]].find {|k,v| v = "test"}
[[XmlParser, "test"]].find {|k,v| v =~ "test"}
name
@@adapters
@@adapters.find {|klass, exp| name =~ exp}
q
name
@@adapters
@@adapters.find(nil) {|klass, exp| name =~ exp}
c
n
@@adapters.find(nil) {|klass, exp| name =~ exp}
q
name
@@adapters
@@adapte3rs
c
fields
q
Dir.glob('*')
config
n
opts[:config]
opts[:config]q
q
opts[:config]q
opts[:config]
opts.input_file
opts.config
